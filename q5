#include <iostream>
using namespace std;

class DiagonalMatrix {
private:
    int* arr;  // 1D array to store diagonal elements
    int n;     // size of matrix (n x n)

public:
    // Constructor: allocate array of size n
    DiagonalMatrix(int size) {
        n = size;
        arr = new int[n];
        for(int i=0; i<n; i++) {
            arr[i] = 0;  // initialize with zeros
        }
    }

    // Destructor to free memory
    ~DiagonalMatrix() {
        delete[] arr;
    }

    // Set element at (i, j)
    void set(int i, int j, int value) {
        if(i == j) {
            arr[i - 1] = value;  // Store element only if on diagonal (1-based indexing)
        } else if(value != 0) {
            cout << "Error: Cannot set non-diagonal elements to non-zero value in Diagonal Matrix." << endl;
        }
    }

    // Get element at (i, j)
    int get(int i, int j) {
        if(i == j) {
            return arr[i - 1];
        } else {
            return 0;  // all non-diagonal elements are zero
        }
    }

    // Display the matrix
    void display() {
        for(int i=1; i<=n; i++) {
            for(int j=1; j<=n; j++) {
                if(i == j) {
                    cout << arr[i - 1] << " ";
                } else {
                    cout << "0 ";
                }
            }
            cout << endl;
        }
    }
};
